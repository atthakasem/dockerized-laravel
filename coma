#!/bin/bash

COMMAND_NAME=coma
WEB_SERVER=apache
PORT=8080
URL=http://localhost:$PORT
INSTALL_DIR=/usr/local/bin/$COMMAND_NAME

UDS_HANDLER='(SetHandler "proxy:unix:..*)'
UDS_CONFIG='(ADD uds.conf ..*)'
TCP_HANDLER='(SetHandler "proxy:fcgi:..*)'
TCP_CONFIG='(ADD tcp.conf ..*)'

case "$1" in
    # Container commands:
    build)
    sudo docker-compose up -d --build $WEB_SERVER && \
    echo "$WEB_SERVER is running: $URL" && \
    explorer.exe $URL
    ;;
    up)
    docker-compose up -d $WEB_SERVER && \
    echo "$WEB_SERVER is running: $URL" && \
    explorer.exe $URL
    ;;
    down) docker-compose stop
    ;;
    remove) docker-compose down
    ;;
    ps) docker-compose ps
    ;;

    # Service commands:
    composer)
    shift
    docker-compose run --rm php composer "$@"
    ;;
    artisan)
    shift
    docker-compose run --rm php php artisan "$@"
    ;;
    php) shift
    docker-compose run --rm php "$@"
    ;;
    phpunit)
    shift
    docker-compose run --rm phpunit "$@"
    ;;
    npm)
    shift
    docker-compose run --rm npm "$@"
    ;;
    shell)
    shift
    docker-compose run --rm $1 /bin/sh
    ;;

    # Other commands:
    install)
    TARGET=$(pwd)/$COMMAND_NAME
    if [ -f $INSTALL_DIR ]; then
        echo "$COMMAND_NAME is already installed in $INSTALL_DIR"
    else
        sudo ln -s $TARGET $INSTALL_DIR
    fi
    ;;
    uninstall)
    which $COMMAND_NAME | sudo xargs rm && echo "$COMMAND_NAME successfully uninstalled."
    ;;
    setup)
    $COMMAND_NAME env ; \
    $COMMAND_NAME build ; \
    $COMMAND_NAME composer install && \
    $COMMAND_NAME npm install && \
    $COMMAND_NAME npm run dev && \
    git remote rm origin &> /dev/null
    ;;
    env)
    ENV_REAL="$(pwd)/src/.env"
    ENV_EXAMPLE="$(pwd)/src/.env.example"
    if [ ! -f $ENV_REAL ]; then
        cp $ENV_EXAMPLE $ENV_REAL
        docker-compose run --rm php php artisan key:generate
    fi
    ;;
    tcp)
    sed -i -E "s~.*$TCP_HANDLER~        \1~" services/apache/httpd-vhosts.conf && \
    sed -i -E "s~.*$TCP_CONFIG~\1~" services/php/Dockerfile && \
    sed -i -E "s~.*$UDS_HANDLER~        # \1~" services/apache/httpd-vhosts.conf && \
    sed -i -E "s~.*$UDS_CONFIG~# \1~" services/php/Dockerfile && \
    $COMMAND_NAME build
    ;;
    uds)
    sed -i -E "s~.*$TCP_HANDLER~        # \1~" services/apache/httpd-vhosts.conf && \
    sed -i -E "s~.*$TCP_CONFIG~# \1~" services/php/Dockerfile && \
    sed -i -E "s~.*$UDS_HANDLER~        \1~" services/apache/httpd-vhosts.conf && \
    sed -i -E "s~.*$UDS_CONFIG~\1~" services/php/Dockerfile && \
    $COMMAND_NAME build
    ;;

    # Default command:
    *) echo "Container commands:
    build     (Re)build and start the web server image and its dependents
    up        Start the web server container and its dependents
    down      Shut down all containers without removing them
    remove    Shut down all containers and remove them
    ps        List running containers

Service commands:
    composer           Run the PHP container and call composer
    artisan            Run the PHP container and call artisan
    php                Run the PHP container
    phpunit            Run the PHPUnit container
    npm                Run the npm container
    shell [SERVICE]    Open the shell of a container

Other commands:
    install      Create a $COMMAND_NAME symlink in /usr/local/bin/
    uninstall    Delete the $COMMAND_NAME symlink from the machine
    setup        Set up the dev environment by starting containers and installing dependencies
    env          Create .env from .env.example and generate an app key
    uds          Switch to PHP-FPM Unix socket connection
    tcp          Switch to PHP-FPM TCP connection"
    ;;
esac
